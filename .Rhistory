total_innings <- dim(ricky_ponting_vi)[1]
# Now we cast the Runs as a numeric table
ricky_ponting_vi <- ricky_ponting_vi %>%mutate_at(vars(Runs), as.numeric)
ricky_ponting_vi %>% summarise(runs_sum = sum(Runs), rpi = mean(Runs),
avg = sum(Runs)/(total_innings - not_out_innings))
# Cumulative RPI
ricky_ponting_rpi_cum <- dplyr::cummean(ricky_ponting_vi$Runs)
ricky_ponting_vi <- add_column(ricky_ponting_vi, rpi_cum = ricky_ponting_rpi_cum)
library(tidyverse)
# Read the data
ricky_ponting <- read_csv("data/ricky_ponting_test_innings.csv")
# Let's say we want to know the number of innings he's actually batted in
ricky_ponting %>% filter(Runs != 'DNB')
# Now let's say we want his
# 1. Batting average
# 2. Runs per innings (A far more valuable statistic that BA imo)
# The problem is that 'Runs' column has a '*' at the end if
# he was not dismissed. We need to get rid of that
# So we'll use the 'stringr' library to substitute '' for '*'
ricky_ponting <- ricky_ponting %>% mutate(Runs = str_replace(Runs, c("[*]"), ""))
ricky_ponting %>% filter(Dismissal == 'not out')
library(tidyverse)
# Read the data
ricky_ponting <- read_csv("data/ricky_ponting_test_innings.csv")
library(tidyverse)
# Read the data
ricky_ponting <- read_csv("data/ricky_ponting_test_innings.csv")
# Let's say we want to know the number of innings he's actually batted in
ricky_ponting %>% filter(Runs != 'DNB')
# Now let's say we want his
# 1. Batting average
# 2. Runs per innings (A far more valuable statistic that BA imo)
# The problem is that 'Runs' column has a '*' at the end if
# he was not dismissed. We need to get rid of that
# So we'll use the 'stringr' library to substitute '' for '*'
ricky_ponting <- ricky_ponting %>% mutate(Runs = str_replace(Runs, c("[*]"), ""))
ricky_ponting %>% filter(Dismissal == 'not out')
# Ricking Ponting valid innings
ricky_ponting_vi <- ricky_ponting %>% filter(Runs != 'DNB')
# Batting Average
not_out_innings <- dim(ricky_ponting_vi %>% filter(Dismissal %in% c('not out','retired notout')))[1]
total_innings <- dim(ricky_ponting_vi)[1]
# Now we cast the Runs as a numeric table
ricky_ponting_vi <- ricky_ponting_vi %>%mutate_at(vars(Runs), as.numeric)
ricky_ponting_vi %>% summarise(runs_sum = sum(Runs), rpi = mean(Runs),
avg = sum(Runs)/(total_innings - not_out_innings))
# Cumulative RPI
ricky_ponting_rpi_cum <- dplyr::cummean(ricky_ponting_vi$Runs)
ricky_ponting_vi <- add_column(ricky_ponting_vi, rpi_cum = ricky_ponting_rpi_cum)
ggplot(ricking_ponting_vi, aes(x=rpi)) + geom_histogram()
ggplot(data=ricky_ponting_vi, aes(x=InnsIndex, y=rpi_cum)) +
geom_bar(stat="identity", width=0.5)
rm(list=ls())
source('~/Personal Projects/Cricket/ricking_ponting_summary.R')
library(tidyverse)
# Read the data
ricky_ponting <- read_csv("data/ricky_ponting_test_innings.csv")
# Let's say we want to know the number of innings he's actually batted in
ricky_ponting %>% filter(Runs != 'DNB')
# Now let's say we want his
# 1. Batting average
# 2. Runs per innings (A far more valuable statistic that BA imo)
# The problem is that 'Runs' column has a '*' at the end if
# he was not dismissed. We need to get rid of that
# So we'll use the 'stringr' library to substitute '' for '*'
ricky_ponting <- ricky_ponting %>% mutate(Runs = str_replace(Runs, c("[*]"), ""))
ricky_ponting %>% filter(Dismissal == 'not out')
# Ricking Ponting valid innings
ricky_ponting_vi <- ricky_ponting %>% filter(Runs != 'DNB')
# Batting Average
not_out_innings <- dim(ricky_ponting_vi %>% filter(Dismissal %in% c('not out','retired notout')))[1]
total_innings <- dim(ricky_ponting_vi)[1]
# Now we cast the Runs as a numeric table
ricky_ponting_vi <- ricky_ponting_vi %>%mutate_at(vars(Runs), as.numeric)
ricky_ponting_vi %>% summarise(runs_sum = sum(Runs), rpi = mean(Runs),
avg = sum(Runs)/(total_innings - not_out_innings))
# Cumulative RPI
ricky_ponting_rpi_cum <- dplyr::cummean(ricky_ponting_vi$Runs)
ricky_ponting_vi <- add_column(ricky_ponting_vi, rpi_cum = ricky_ponting_rpi_cum)
ggplot(ricky_ponting_vi, aes(x=Runs, y=SR)) + geom_point(shape=1)
ggplot(ricky_ponting_vi, aes(x=Runs, y=SR)) + geom_point(shape=1) + ylim(0,100)
ricky_ponting_vi
ggplot(ricky_ponting_vi, aes(x=Runs, y=SR)) + geom_point(shape=1)
library(tidyverse)
# Read the data
ricky_ponting <- read_csv("data/ricky_ponting_test_innings.csv")
# Let's say we want to know the number of innings he's actually batted in
ricky_ponting %>% filter(Runs != 'DNB')
# Now let's say we want his
# 1. Batting average
# 2. Runs per innings (A far more valuable statistic that BA imo)
# The problem is that 'Runs' column has a '*' at the end if
# he was not dismissed. We need to get rid of that
# So we'll use the 'stringr' library to substitute '' for '*'
ricky_ponting <- ricky_ponting %>% mutate(Runs = str_replace(Runs, c("[*]"), ""))
ricky_ponting %>% filter(Dismissal == 'not out')
# Ricking Ponting valid innings
ricky_ponting_vi <- ricky_ponting %>% filter(Runs != 'DNB')
# Batting Average
not_out_innings <- dim(ricky_ponting_vi %>% filter(Dismissal %in% c('not out','retired notout')))[1]
total_innings <- dim(ricky_ponting_vi)[1]
# Now we cast the Runs as a numeric table
ricky_ponting_vi <- ricky_ponting_vi %>%mutate_at(vars(Runs), as.numeric)
ricky_ponting_vi <- ricky_ponting_vi %>%mutate_at(vars(SR), as.numeric)
ricky_ponting_vi %>% summarise(runs_sum = sum(Runs), rpi = mean(Runs),
avg = sum(Runs)/(total_innings - not_out_innings))
# Cumulative RPI
ricky_ponting_rpi_cum <- dplyr::cummean(ricky_ponting_vi$Runs)
ricky_ponting_vi <- add_column(ricky_ponting_vi, rpi_cum = ricky_ponting_rpi_cum)
ggplot(ricky_ponting_vi, aes(x=Runs, y=SR)) + geom_point(shape=1)
library(tidyverse)
# Read the data
ricky_ponting <- read_csv("data/ricky_ponting_test_innings.csv")
# Let's say we want to know the number of innings he's actually batted in
ricky_ponting %>% filter(Runs != 'DNB')
# Now let's say we want his
# 1. Batting average
# 2. Runs per innings (A far more valuable statistic that BA imo)
# The problem is that 'Runs' column has a '*' at the end if
# he was not dismissed. We need to get rid of that
# So we'll use the 'stringr' library to substitute '' for '*'
ricky_ponting <- ricky_ponting %>% mutate(Runs = str_replace(Runs, c("[*]"), ""))
ricky_ponting %>% filter(Dismissal == 'not out')
# Ricking Ponting valid innings
ricky_ponting_vi <- ricky_ponting %>% filter(Runs != 'DNB')
# Batting Average
not_out_innings <- dim(ricky_ponting_vi %>% filter(Dismissal %in% c('not out','retired notout')))[1]
total_innings <- dim(ricky_ponting_vi)[1]
# Now we cast the Runs as a numeric table
ricky_ponting_vi <- ricky_ponting_vi %>%mutate_at(vars(Runs), as.numeric)
ricky_ponting_vi <- ricky_ponting_vi %>%mutate_at(vars(SR), as.numeric)
ricky_ponting_vi %>% summarise(runs_sum = sum(Runs), rpi = mean(Runs),
avg = sum(Runs)/(total_innings - not_out_innings))
# Cumulative RPI
ricky_ponting_rpi_cum <- dplyr::cummean(ricky_ponting_vi$Runs)
ricky_ponting_vi <- add_column(ricky_ponting_vi, rpi_cum = ricky_ponting_rpi_cum)
ggplot(ricky_ponting_vi, aes(x=Runs, y=SR)) + geom_point(shape=1) + ylim(0,200)
ricky_ponting_vi <- ricky_ponting_vi %>%mutate_at(vars(2), as.numeric)
rm(list=ls())
library(tidyverse)
# Read the data
ricky_ponting <- read_csv("data/ricky_ponting_test_innings.csv")
# Let's say we want to know the number of innings he's actually batted in
ricky_ponting %>% filter(Runs != 'DNB')
# Now let's say we want his
# 1. Batting average
# 2. Runs per innings (A far more valuable statistic that BA imo)
# The problem is that 'Runs' column has a '*' at the end if
# he was not dismissed. We need to get rid of that
# So we'll use the 'stringr' library to substitute '' for '*'
ricky_ponting <- ricky_ponting %>% mutate(Runs = str_replace(Runs, c("[*]"), ""))
ricky_ponting %>% filter(Dismissal == 'not out')
# Ricking Ponting valid innings
ricky_ponting_vi <- ricky_ponting %>% filter(Runs != 'DNB')
# Batting Average
not_out_innings <- dim(ricky_ponting_vi %>% filter(Dismissal %in% c('not out','retired notout')))[1]
total_innings <- dim(ricky_ponting_vi)[1]
# Now we cast the Runs as a numeric table
ricky_ponting_vi <- ricky_ponting_vi %>%mutate_at(vars(2), as.numeric)
ricky_ponting_vi <- ricky_ponting_vi %>%mutate_at(vars(SR), as.numeric)
ricky_ponting_vi %>% summarise(runs_sum = sum(Runs), rpi = mean(Runs),
avg = sum(Runs)/(total_innings - not_out_innings))
# Cumulative RPI
ricky_ponting_rpi_cum <- dplyr::cummean(ricky_ponting_vi$Runs)
ricky_ponting_vi <- add_column(ricky_ponting_vi, rpi_cum = ricky_ponting_rpi_cum)
ggplot(ricky_ponting_vi, aes(x=Runs, y=SR)) + geom_point(shape=1) + ylim(0,200)
rm(list=ls())
library(tidyverse)
# Read the data
ricky_ponting <- read_csv("data/ricky_ponting_test_innings.csv")
# Let's say we want to know the number of innings he's actually batted in
ricky_ponting %>% filter(Runs != 'DNB')
# Now let's say we want his
# 1. Batting average
# 2. Runs per innings (A far more valuable statistic that BA imo)
# The problem is that 'Runs' column has a '*' at the end if
# he was not dismissed. We need to get rid of that
# So we'll use the 'stringr' library to substitute '' for '*'
ricky_ponting <- ricky_ponting %>% mutate(Runs = str_replace(Runs, c("[*]"), ""))
ricky_ponting %>% filter(Dismissal == 'not out')
# Ricking Ponting valid innings
ricky_ponting_vi <- ricky_ponting %>% filter(Runs != 'DNB')
# Batting Average
not_out_innings <- dim(ricky_ponting_vi %>% filter(Dismissal %in% c('not out','retired notout')))[1]
total_innings <- dim(ricky_ponting_vi)[1]
# Now we cast the Runs as a numeric table
ricky_ponting_vi <- ricky_ponting_vi %>%mutate_at(vars(2,7), as.numeric)
# ricky_ponting_vi <- ricky_ponting_vi %>%mutate_at(vars(SR), as.numeric)
ricky_ponting_vi %>% summarise(runs_sum = sum(Runs), rpi = mean(Runs),
avg = sum(Runs)/(total_innings - not_out_innings))
# Cumulative RPI
ricky_ponting_rpi_cum <- dplyr::cummean(ricky_ponting_vi$Runs)
ricky_ponting_vi <- add_column(ricky_ponting_vi, rpi_cum = ricky_ponting_rpi_cum)
ggplot(ricky_ponting_vi, aes(x=Runs, y=SR)) + geom_point(shape=1) + ylim(0,200)
ricky_ponting_vi
ricky_ponting_vi[Date, ]
ricky_ponting_vi[Opposition, ]
ricky_ponting_vi[c=(Opposition), ]
ricky_ponting_vi[c=(ricky_ponting_vi$Opposition), ]
library(tidyverse)
# Read the data
ricky_ponting <- read_csv("data/ricky_ponting_test_innings.csv")
# Let's say we want to know the number of innings he's actually batted in
ricky_ponting %>% filter(Runs != 'DNB')
# Now let's say we want his
# 1. Batting average
# 2. Runs per innings (A far more valuable statistic that BA imo)
# The problem is that 'Runs' column has a '*' at the end if
# he was not dismissed. We need to get rid of that
# So we'll use the 'stringr' library to substitute '' for '*'
ricky_ponting <- ricky_ponting %>% mutate(Runs = str_replace(Runs, c("[*]"), ""))
ricky_ponting %>% filter(Dismissal == 'not out')
# Ricking Ponting valid innings
ricky_ponting_vi <- ricky_ponting %>% filter(Runs != 'DNB')
# Batting Average
not_out_innings <- dim(ricky_ponting_vi %>% filter(Dismissal %in% c('not out','retired notout')))[1]
total_innings <- dim(ricky_ponting_vi)[1]
# Now we cast the Runs as a numeric table
ricky_ponting_vi <- ricky_ponting_vi %>%mutate_at(vars(2,7), as.numeric)
# ricky_ponting_vi <- ricky_ponting_vi %>%mutate_at(vars(SR), as.numeric)
ricky_ponting_vi %>% summarise(runs_sum = sum(Runs), rpi = mean(Runs),
avg = sum(Runs)/(total_innings - not_out_innings))
# Cumulative RPI
ricky_ponting_rpi_cum <- dplyr::cummean(ricky_ponting_vi$Runs)
ricky_ponting_vi <- add_column(ricky_ponting_vi, rpi_cum = ricky_ponting_rpi_cum)
ggplot(ricky_ponting_vi, aes(x=Runs, y=SR)) + geom_point(shape=1) + ylim(0,200)
rm(list=ls())
library(tidyverse)
# Read the data
legends <- read_csv("data/legends_batting.csv")
# Drop 'DNB' rows
legends <- legends %>% filter(Runs != 'DNB')
# The problem is that 'Runs' column has a '*' at the end if
# he was not dismissed. We need to get rid of that
# So we'll use the 'stringr' library to substitute '' for '*'
legends <- legends %>% mutate(Runs = str_replace(Runs, c("[*]", "")))
library(tidyverse)
# Read the data
legends <- read_csv("data/legends_batting.csv")
# Drop 'DNB' rows
legends <- legends %>% filter(Runs != 'DNB')
# The problem is that 'Runs' column has a '*' at the end if
# he was not dismissed. We need to get rid of that
# So we'll use the 'stringr' library to substitute '' for '*'
legends <- legends %>% mutate(Runs = str_replace(Runs, c("[*]"), ""))
legends
library(tidyverse)
# Read the data
ricky_ponting <- read_csv("data/ricky_ponting_test_innings.csv")
# Let's say we want to know the number of innings he's actually batted in
ricky_ponting %>% filter(Runs != 'DNB')
# Now let's say we want his
# 1. Batting average
# 2. Runs per innings (A far more valuable statistic that BA imo)
# The problem is that 'Runs' column has a '*' at the end if
# he was not dismissed. We need to get rid of that
# So we'll use the 'stringr' library to substitute '' for '*'
ricky_ponting <- ricky_ponting %>% mutate(Runs = str_replace(Runs, c("[*]"), ""))
View(ricky_ponting)
View(legends)
# 4,5,6,7,8,9,10, 12
legends <- legends %>% mutate_at(vars(4,5,6,7,8,9,10,12), as.numeric)
View(legends)
View(legends)
library(tidyverse)
# Read the data
legends <- read_csv("data/legends_batting.csv")
# Drop 'DNB' rows
legends <- legends %>% filter(Runs != 'DNB')
# The problem is that 'Runs' column has a '*' at the end if
# he was not dismissed. We need to get rid of that
# So we'll use the 'stringr' library to substitute '' for '*'
legends <- legends %>% mutate(Runs = str_replace(Runs, c("[*]"), ""))
# We need to recast the following columns as numerical
# 4,5,6,7,8,9,10, 12
legends <- legends %>% mutate_at(vars(4), as.numeric)
library(tidyverse)
# Read the data
legends <- read_csv("data/legends_batting.csv")
# Drop 'DNB' rows
legends <- legends %>% filter(Runs != 'DNB')
# The problem is that 'Runs' column has a '*' at the end if
# he was not dismissed. We need to get rid of that
# So we'll use the 'stringr' library to substitute '' for '*'
legends <- legends %>% mutate(Runs = str_replace(Runs, c("[*]"), ""))
# We need to recast the following columns as numerical
# 4,5,6,7,8,9,10, 12
legends <- legends %>% mutate_at(vars(4), as.numeric)
legends_grouped <- legends %>% group_by(Name) %>% summarise(rpi=mean(Runs))
legends_grouped
library(tidyverse)
# Read the data
legends <- read_csv("data/legends_batting.csv")
unique(legends$Runs)
sort(unique(legends$Runs))
library(tidyverse)
# Read the data
legends <- read_csv("data/legends_batting.csv")
# Drop 'DNB' rows
legends <- legends %>% filter(Runs != c('DNB', 'TDNB'))
library(tidyverse)
# Read the data
legends <- read_csv("data/legends_batting.csv")
# Drop 'DNB' rows
legends <- legends %>% filter(Runs != c('DNB', 'TDNB'))
# The problem is that 'Runs' column has a '*' at the end if
# he was not dismissed. We need to get rid of that
# So we'll use the 'stringr' library to substitute '' for '*'
legends <- legends %>% mutate(Runs = str_replace(Runs, c("[*]"), ""))
# We need to recast the following columns as numerical
# 4,5,6,7,8,9,10, 12
legends <- legends %>% mutate_at(vars(4), as.numeric)
legends_grouped <- legends %>% group_by(Name) %>% summarise(rpi=mean(Runs))
legends_grouped
library(tidyverse)
# Read the data
legends <- read_csv("data/legends_batting.csv")
# Drop 'DNB' rows
legends <- legends %>% filter(!Runs %in% c('DNB', 'TDNB'))
# The problem is that 'Runs' column has a '*' at the end if
# he was not dismissed. We need to get rid of that
# So we'll use the 'stringr' library to substitute '' for '*'
legends <- legends %>% mutate(Runs = str_replace(Runs, c("[*]"), ""))
# We need to recast the following columns as numerical
# 4,5,6,7,8,9,10, 12
legends <- legends %>% mutate_at(vars(4), as.numeric)
legends_grouped <- legends %>% group_by(Name) %>% summarise(rpi=mean(Runs))
legends_grouped
library(tidyverse)
# Read the data
legends <- read_csv("data/legends_batting.csv")
# Drop 'DNB' rows
legends <- legends %>% filter(!Runs %in% c('DNB', 'TDNB'))
# The problem is that 'Runs' column has a '*' at the end if
# he was not dismissed. We need to get rid of that
# So we'll use the 'stringr' library to substitute '' for '*'
legends <- legends %>% mutate(Runs = str_replace(Runs, c("[*]"), ""))
# We need to recast the following columns as numerical
# 4,5,6,7,8,9,10, 12
legends <- legends %>% mutate_at(vars(4), as.numeric)
legends_grouped <- legends %>%
group_by(Name) %>%
summarise(rpi=mean(Runs))
legends_test <- legends %>%
group_by(Name) %>%
mutate(cum_rpi = dplyr::cummean(Runs))
View(legends_test)
legends %>% group_by(Name) %>% summarize(max_rpi=max(cum_rpi))
legends_test %>% group_by(Name) %>% summarize(max_rpi=max(cum_rpi))
legends_test %>% group_by(Name) %>% summarize(max_rpi=median(cum_rpi))
library(tidyverse)
# Read the data
ricky_ponting <- read_csv("data/ricky_ponting_test_innings.csv")
# Let's say we want to know the number of innings he's actually batted in
ricky_ponting %>% filter(Runs != 'DNB')
# Now let's say we want his
# 1. Batting average
# 2. Runs per innings (A far more valuable statistic that BA imo)
# The problem is that 'Runs' column has a '*' at the end if
# he was not dismissed. We need to get rid of that
# So we'll use the 'stringr' library to substitute '' for '*'
ricky_ponting <- ricky_ponting %>% mutate(Runs = str_replace(Runs, c("[*]"), ""))
ricky_ponting %>% filter(Dismissal == 'not out')
# Ricking Ponting valid innings
ricky_ponting_vi <- ricky_ponting %>% filter(Runs != 'DNB')
# Batting Average
not_out_innings <- dim(ricky_ponting_vi %>% filter(Dismissal %in% c('not out','retired notout')))[1]
total_innings <- dim(ricky_ponting_vi)[1]
# Now we cast the Runs as a numeric table
ricky_ponting_vi <- ricky_ponting_vi %>%mutate_at(vars(2,7), as.numeric)
# ricky_ponting_vi <- ricky_ponting_vi %>%mutate_at(vars(SR), as.numeric)
ricky_ponting_vi %>% summarise(runs_sum = sum(Runs), rpi = mean(Runs),
avg = sum(Runs)/(total_innings - not_out_innings))
# Cumulative RPI
ricky_ponting_rpi_cum <- dplyr::cummean(ricky_ponting_vi$Runs)
ricky_ponting_vi <- add_column(ricky_ponting_vi, rpi_cum = ricky_ponting_rpi_cum)
ggplot(ricky_ponting_vi, aes(x=Runs, y=SR)) + geom_point(shape=1) + ylim(0,200)
ggplot(ricky_ponting_vi, aes(x=rpi_cum)) + geom_bar()
ggplot(ricky_ponting_vi, aes(x=Runs, y=SR)) + geom_point(shape=1) + ylim(0,200)
ggplot(ricky_ponting_vi, aes(x=InnsIndex, y=rpi_cum)) + geom_bar()
ggplot(ricky_ponting_vi, aes(x=InnsIndex, y=rpi_cum)) + geom_bar(stat="identity")
View(legends_test)
View(ricky_ponting)
legends <- legends %>% mutate(Date = as.Date(Date, format="%d %b %Y"))
sachin <- legends %>% filter(Name = "Sachin Tendulkar")
sachin <- legends %>% filter(Name == "Sachin Tendulkar")
View(sachin)
library(tidyverse)
# Read the data
legends <- read_csv("data/legends_batting.csv")
# Drop 'DNB' rows
legends <- legends %>% filter(!Runs %in% c('DNB', 'TDNB'))
# The problem is that 'Runs' column has a '*' at the end if
# he was not dismissed. We need to get rid of that
# So we'll use the 'stringr' library to substitute '' for '*'
legends <- legends %>% mutate(Runs = str_replace(Runs, c("[*]"), ""))
# We need to recast the following columns as numerical
# 4,5,6,7,8,9,10, 12
legends <- legends %>% mutate_at(vars(4), as.numeric)
legends_grouped <- legends %>%
group_by(Name) %>%
summarise(rpi=mean(Runs))
legends <- legends %>%
group_by(Name) %>%
mutate(cum_rpi = dplyr::cummean(Runs))
# Say I want to plot time series data for batsmen
# Then I want to convert the 'Date' column to a friendlier format
legends <- legends %>% mutate(Date = as.Date(Date, format="%d %b %Y"))
# Then say I just want to plot a timeseries for Sachin
sachin <- legends %>% filter(Name == "Sachin Tendulkar")
sachin <- legends %>% filter(Name == "Sachin Tendulkar")
# Let's make a rather crude timeseries plot of Sachin's RPI over his
# career
ggplot(sachin, aes(Date, cum_rpi)) + geom_line() +
scale_x_date(format = "%b-%Y") + xlab("Month - Year") + ylab("Cumulate Runs per Innings")
ggplot(sachin, aes(Date, cum_rpi)) + geom_line() +
xlab("Month - Year") + ylab("Cumulate Runs per Innings")
# Then say I just want to plot a timeseries for Sachin
sachin <- legends %>% filter(Name == "Sachin Tendulkar")
# Let's make a rather crude timeseries plot of Sachin's RPI over his
# career
ggplot(sachin, aes(Date, cum_rpi)) + geom_line() +
xlab("Month - Year") + ylab("Cumulate Runs per Innings")
ponting <- legends %>% filter(Name == "Ricky Ponting")
# Let's make a rather crude timeseries plot of Sachin's RPI over his
# career
ggplot(ponting, aes(Date, cum_rpi)) + geom_line() +
xlab("Month - Year") + ylab("Cumulate Runs per Innings")
for (batsman in unique(legends$Name)){
print(batsman)
}
dev.off()
for (batsman_name in unique(legends$Name)){
batsman <- legends %>% filter(Name == batsman_name)
ggplot(batsman, aes(Date, cum_rpi)) + geom_line() +
xlab("Month - Year") + ylab("Cumulate Runs per Innings") +
xlim(as.Date("1989-01-01", "2014-12-30")) +
ggtitle(batsman_name)
}
for (batsman_name in unique(legends$Name)){
batsman <- legends %>% filter(Name == batsman_name)
ggplot(batsman, aes(Date, cum_rpi)) + geom_line() +
xlab("Month - Year") + ylab("Cumulate Runs per Innings") +
xlim(as.Date(c("1989-01-01", "2014-12-30"))) +
ggtitle(batsman_name)
}
for (batsman_name in unique(legends$Name)){
batsman <- legends %>% filter(Name == batsman_name)
batsman_plot <- ggplot(batsman, aes(Date, cum_rpi)) + geom_line() +
xlab("Month - Year") + ylab("Cumulate Runs per Innings") +
xlim(as.Date(c("1989-01-01", "2014-12-30"))) +
ggtitle(batsman_name)
print(batsman_plot)
}
# Let's just say that for visual purposes I want to drop outlandish
# cumulative RPI values
legends <- legends %>% filter(cum_rpi<=60 & cum_rpi>=25)
for (batsman_name in unique(legends$Name)){
batsman <- legends %>% filter(Name == batsman_name)
batsman_plot <- ggplot(batsman, aes(Date, cum_rpi)) + geom_line() +
xlab("Month - Year") + ylab("Cumulate Runs per Innings") +
xlim(as.Date(c("1989-01-01", "2014-12-30"))) +
ggtitle(paste(batsman_name, "Extremes removed"))
print(batsman_plot)
}
legends <- legends %>% filter(cum_rpi<=60 & cum_rpi>=25)
for (batsman_name in unique(legends$Name)){
batsman <- legends %>% filter(Name == batsman_name)
batsman_plot <- ggplot(batsman, aes(Date, cum_rpi)) + geom_line() +
xlab("Month - Year") + ylab("Cumulate Runs per Innings") +
xlim(as.Date(c("1989-01-01", "2014-12-30"))) +
ylim(25, 60) +
ggtitle(paste(batsman_name, "extremes removed"))
print(batsman_plot)
}
legends <- legends %>% filter(cum_rpi<=60 & cum_rpi>=25)
for (batsman_name in unique(legends$Name)){
batsman <- legends %>% filter(Name == batsman_name)
batsman_plot <- ggplot(batsman, aes(Date, cum_rpi)) + geom_line(size=0.5) +
xlab("Month - Year") + ylab("Cumulate Runs per Innings") +
xlim(as.Date(c("1989-01-01", "2014-12-30"))) +
ylim(25, 60) +
ggtitle(paste(batsman_name, "extremes removed"))
print(batsman_plot)
}
# Let's just say that for visual purposes I want to drop outlandish
# cumulative RPI values
legends <- legends %>% filter(cum_rpi<=60 & cum_rpi>=25)
for (batsman_name in unique(legends$Name)){
batsman <- legends %>% filter(Name == batsman_name)
batsman_plot <- ggplot(batsman, aes(Date, cum_rpi)) + geom_line(size=1) +
xlab("Month - Year") + ylab("Cumulate Runs per Innings") +
xlim(as.Date(c("1989-01-01", "2014-12-30"))) +
ylim(25, 60) +
ggtitle(paste(batsman_name, "extremes removed"))
print(batsman_plot)
}
# Let's just say that for visual purposes I want to drop outlandish
# cumulative RPI values
legends <- legends %>% filter(cum_rpi<=60 & cum_rpi>=25)
for (batsman_name in unique(legends$Name)){
batsman <- legends %>% filter(Name == batsman_name)
batsman_plot <- ggplot(batsman, aes(Date, cum_rpi)) + geom_line(size=0.25) +
xlab("Month - Year") + ylab("Cumulate Runs per Innings") +
xlim(as.Date(c("1989-01-01", "2014-12-30"))) +
ylim(25, 60) +
ggtitle(paste(batsman_name, "extremes removed"))
print(batsman_plot)
}
ggplot(ponting, aes(x=X1, y=Runs)) + geom_bar()
ggplot(ponting, aes(x=X1, y=Runs)) + geom_bar(stat="identity")
ggplot(ponting, aes(x=Date, y=Runs)) + geom_bar(stat="identity")
