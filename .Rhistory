library(stringr)
library(zoo)
# Read the data
grounds <- read_csv("data/bowling_performances_1985_formatted.csv")
grounds
rm(list=ls())
# Cricket Grounds
library(tidyverse)
library(stringr)
library(zoo)
# Read the data
grounds <- read_csv("data/bowling_performances_1985_formatted.csv")
# Writing a function to get the aggregate mean from vectors of runs and wickets
get_wickets_mean <- function (runs, wickets){
runs_sum = sum(runs)
wickets_sum = sum(wickets)
return (runs_sum/wickets_sum)
}
grounds[, "ground_inns_mean"] <- NA
for (i in unique(grounds$Ground)){
print(i)
print(dim(grounds %>% filter(Ground==i)))
ground_df <- grounds %>% filter(Ground==i)
ground_df <- grounds %>% arrange(Date, Inns)
df_length <- dim(ground_df)[1]
if (df_length < 11){
next
}
else{
for (i in 11: df_length){
start_index <- i - 10
end_index <- i - 1
inns_index <- ground_df[i,]$Index
computing_df <- ground_df[start_index:end_index, ]
wickets_mean <- get_wickets_mean(computing_df$Runs, computing_df$Wickets)
grounds[(grounds$Index==inns_index), "ground_inns_mean"] <- wickets_mean
}
}
}
# Cricket Grounds
library(tidyverse)
library(stringr)
library(zoo)
# Read the data
grounds <- read_csv("data/bowling_performances_1985_formatted.csv")
# Writing a function to get the aggregate mean from vectors of runs and wickets
get_wickets_mean <- function (runs, wickets){
runs_sum = sum(runs)
wickets_sum = sum(wickets)
return (runs_sum/wickets_sum)
}
grounds[, "ground_inns_mean"] <- NA
for (i in unique(grounds$Ground)){
print(i)
print(dim(grounds %>% filter(Ground==i)))
ground_df <- grounds %>% filter(Ground==i)
ground_df <- ground_df %>% arrange(Date, Inns)
df_length <- dim(ground_df)[1]
if (df_length < 11){
next
}
else{
for (i in 11: df_length){
start_index <- i - 10
end_index <- i - 1
inns_index <- ground_df[i,]$Index
computing_df <- ground_df[start_index:end_index, ]
wickets_mean <- get_wickets_mean(computing_df$Runs, computing_df$Wickets)
grounds[(grounds$Index==inns_index), "ground_inns_mean"] <- wickets_mean
}
}
}
grounds
View(grounds)
library(tidyverse)
# Read the data
legends <- read_csv("data/legends_batting_ver_2.csv")
# Drop 'DNB' rows
legends <- legends %>% filter(!Runs %in% c('DNB', 'TDNB'))
# The problem is that 'Runs' column has a '*' at the end if
# he was not dismissed. We need to get rid of that
# So we'll use the 'stringr' library to substitute '' for '*'
legends <- legends %>% mutate(Runs = str_replace(Runs, c("[*]"), ""))
# We need to recast the following columns as numerical
# 4,5,6,7,8,9,10, 12
legends <- legends %>% mutate_at(vars(4, 12), as.numeric)
legends_grouped <- legends %>%
group_by(Name) %>%
summarise(rpi=mean(Runs))
legends <- legends %>%
group_by(Name) %>%
mutate(cum_rpi = dplyr::cummean(Runs))
# Say I want to plot time series data for batsmen
# Then I want to convert the 'Date' column to a friendlier format
legends <- legends %>% mutate(Date = as.Date(Date, format="%d %b %Y"))
legends <- legends %>% mutate(Opposition = str_replace(Opposition, c("v "), ""))
# Rename the 13th column 'Opposition' as 'Team'. So that we can join them
colnames(legends) [13] <- "Team"
View(legends)
library(tidyverse)
# Read the data
legends <- read_csv("data/legends_batting_ver_2.csv")
# Drop 'DNB' rows
legends <- legends %>% filter(!Runs %in% c('DNB', 'TDNB'))
# The problem is that 'Runs' column has a '*' at the end if
# he was not dismissed. We need to get rid of that
# So we'll use the 'stringr' library to substitute '' for '*'
legends <- legends %>% mutate(Runs = str_replace(Runs, c("[*]"), ""))
# We need to recast the following columns as numerical
# 4,5,6,7,8,9,10, 12
legends <- legends %>% mutate_at(vars(4, 12), as.numeric)
legends_grouped <- legends %>%
group_by(Name) %>%
summarise(rpi=mean(Runs))
legends <- legends %>%
group_by(Name) %>%
mutate(cum_rpi = dplyr::cummean(Runs))
# Say I want to plot time series data for batsmen
# Then I want to convert the 'Date' column to a friendlier format
legends <- legends %>% mutate(Date = as.Date(Date, format="%d %b %Y"))
legends <- legends %>% mutate(Opposition = str_replace(Opposition, c("v "), ""))
# Rename the 13th column 'Opposition' as 'Team'. So that we can join them
colnames(legends) [13] <- "Team"
for (batsman_name in unique(legends$Name)){
batsman <- legends %>% filter(Name == batsman_name)
batsman_plot <- ggplot(batsman, aes(Date, cum_rpi)) + geom_line() +
xlab("Month - Year") + ylab("Cumulate Runs per Innings") +
xlim(as.Date(c("1989-01-01", "2014-12-30"))) +
ggtitle(batsman_name)
print(batsman_plot)
}
# Let's just say that for visual purposes I want to drop outlandish
# cumulative RPI values
legends <- legends %>% filter(cum_rpi<=60 & cum_rpi>=25)
for (batsman_name in unique(legends$Name)){
batsman <- legends %>% filter(Name == batsman_name)
batsman_plot <- ggplot(batsman, aes(Date, cum_rpi)) + geom_line(size=0.25) +
xlab("Time") + ylab("Cumulative Runs per Innings") +
xlim(as.Date(c("1989-01-01", "2014-12-30"))) +
ylim(25, 60) +
ggtitle(paste(batsman_name, "extremes removed"))
print(batsman_plot)
}
write.csv(legends, file="data/legends_batting_formatted.csv")
rm(list=ls())
# Cricket Grounds
library(tidyverse)
library(stringr)
library(zoo)
# Read the bowling data. It also has the ground name so we can
# start from there
grounds <- read_csv("data/bowling_performances_1985_formatted.csv")
# Now let's read the legends batting data
legends <- read_csv("data/legends_batting_formatted")
# Writing a function to get the aggregate mean from vectors of runs and wickets
get_wickets_mean <- function (runs, wickets){
runs_sum = sum(runs)
wickets_sum = sum(wickets)
return (runs_sum/wickets_sum)
}
# Setting up an empty column for ground averages
grounds[, "ground_inns_mean"] <- NA
# Applying the function to that column
for (i in unique(grounds$Ground)){
print(i)
print(dim(grounds %>% filter(Ground==i)))
ground_df <- grounds %>% filter(Ground==i)
ground_df <- ground_df %>% arrange(Date, Inns)
df_length <- dim(ground_df)[1]
if (df_length < 11){
next
}
else{
for (i in 11: df_length){
start_index <- i - 10
end_index <- i - 1
inns_index <- ground_df[i,]$Index
computing_df <- ground_df[start_index:end_index, ]
wickets_mean <- get_wickets_mean(computing_df$Runs, computing_df$Wickets)
grounds[(grounds$Index==inns_index), "ground_inns_mean"] <- wickets_mean
}
}
}
# Joining
rm(computing_df)
# Cricket Grounds
library(tidyverse)
library(stringr)
library(zoo)
# Read the bowling data. It also has the ground name so we can
# start from there
grounds <- read_csv("data/bowling_performances_1985_formatted.csv")
# Now let's read the legends batting data
legends <- read_csv("data/legends_batting_formatted")
# Writing a function to get the aggregate mean from vectors of runs and wickets
get_wickets_mean <- function (runs, wickets){
runs_sum = sum(runs)
wickets_sum = sum(wickets)
return (runs_sum/wickets_sum)
}
# Setting up an empty column for ground averages
grounds[, "ground_inns_mean"] <- NA
# Applying the function to that column
for (i in unique(grounds$Ground)){
print(i)
print(dim(grounds %>% filter(Ground==i)))
ground_df <- grounds %>% filter(Ground==i)
ground_df <- ground_df %>% arrange(Date, Inns)
df_length <- dim(ground_df)[1]
if (df_length < 11){
next
}
else{
for (i in 11: df_length){
start_index <- i - 10
end_index <- i - 1
inns_index <- ground_df[i,]$Index
computing_df <- ground_df[start_index:end_index, ]
wickets_mean <- get_wickets_mean(computing_df$Runs, computing_df$Wickets)
grounds[(grounds$Index==inns_index), "ground_inns_mean"] <- wickets_mean
}
}
}
# Joining legends with the grounds tibble
joined_df <- left_join(legends, grounds, by=c("Team","Date","Inns"))
# Cricket Grounds
library(tidyverse)
library(stringr)
library(zoo)
# Read the bowling data. It also has the ground name so we can
# start from there
grounds <- read_csv("data/bowling_performances_1985_formatted.csv")
# Now let's read the legends batting data
legends <- read_csv("data/legends_batting_formatted.csv")
# Writing a function to get the aggregate mean from vectors of runs and wickets
get_wickets_mean <- function (runs, wickets){
runs_sum = sum(runs)
wickets_sum = sum(wickets)
return (runs_sum/wickets_sum)
}
# Setting up an empty column for ground averages
grounds[, "ground_inns_mean"] <- NA
# Applying the function to that column
for (i in unique(grounds$Ground)){
print(i)
print(dim(grounds %>% filter(Ground==i)))
ground_df <- grounds %>% filter(Ground==i)
ground_df <- ground_df %>% arrange(Date, Inns)
df_length <- dim(ground_df)[1]
if (df_length < 11){
next
}
else{
for (i in 11: df_length){
start_index <- i - 10
end_index <- i - 1
inns_index <- ground_df[i,]$Index
computing_df <- ground_df[start_index:end_index, ]
wickets_mean <- get_wickets_mean(computing_df$Runs, computing_df$Wickets)
grounds[(grounds$Index==inns_index), "ground_inns_mean"] <- wickets_mean
}
}
}
# Joining legends with the grounds tibble
joined_df <- left_join(legends, grounds, by=c("Team","Date","Inns"))
View(joined_df)
ponting <- joined_df %>% filter(Name=='Ricky Ponting')
library(tidyverse)
# Read the data
ricky_ponting <- read_csv("data/ricky_ponting_test_innings.csv")
# Let's say we want to know the number of innings he's actually batted in
ricky_ponting %>% filter(Runs != 'DNB')
# Now let's say we want his
# 1. Batting average
# 2. Runs per innings (A far more valuable statistic that BA imo)
# The problem is that 'Runs' column has a '*' at the end if
# he was not dismissed. We need to get rid of that
# So we'll use the 'stringr' library to substitute '' for '*'
ricky_ponting <- ricky_ponting %>% mutate(Runs = str_replace(Runs, c("[*]"), ""))
ricky_ponting %>% filter(Dismissal == 'not out')
# Ricking Ponting valid innings
ricky_ponting_vi <- ricky_ponting %>% filter(Runs != 'DNB')
View(ricky_ponting_vi)
View(ponting)
View(legends)
library(tidyverse)
# Read the data
legends <- read_csv("data/legends_batting_ver_2.csv")
View(legends)
legends <- legends %>% filter(!Runs %in% c('DNB', 'TDNB'))
# The problem is that 'Runs' column has a '*' at the end if
# he was not dismissed. We need to get rid of that
# So we'll use the 'stringr' library to substitute '' for '*'
legends <- legends %>% mutate(Runs = str_replace(Runs, c("[*]"), ""))
View(legends)
legends <- legends %>% mutate_at(vars(4, 12), as.numeric)
View(legends)
library(tidyverse)
# Read the data
legends <- read_csv("data/legends_batting_ver_2.csv")
# Drop 'DNB' rows
legends <- legends %>% filter(!Runs %in% c('DNB', 'TDNB'))
# The problem is that 'Runs' column has a '*' at the end if
# he was not dismissed. We need to get rid of that
# So we'll use the 'stringr' library to substitute '' for '*'
legends <- legends %>% mutate(Runs = str_replace(Runs, c("[*]"), ""))
# We need to recast the following columns as numerical
# 4,5,6,7,8,9,10, 12
legends <- legends %>% mutate_at(vars(4, 12), as.numeric)
legends_grouped <- legends %>%
group_by(Name) %>%
summarise(rpi=mean(Runs))
legends <- legends %>%
group_by(Name) %>%
mutate(cum_rpi = dplyr::cummean(Runs))
# Say I want to plot time series data for batsmen
# Then I want to convert the 'Date' column to a friendlier format
legends <- legends %>% mutate(Date = as.Date(Date, format="%d %b %Y"))
legends <- legends %>% mutate(Opposition = str_replace(Opposition, c("v "), ""))
# Rename the 13th column 'Opposition' as 'Team'. So that we can join them
colnames(legends) [13] <- "Team"
View(legends)
library(tidyverse)
# Read the data
legends <- read_csv("data/legends_batting_ver_2.csv")
# Drop 'DNB' rows
legends <- legends %>% filter(!Runs %in% c('DNB', 'TDNB'))
# The problem is that 'Runs' column has a '*' at the end if
# he was not dismissed. We need to get rid of that
# So we'll use the 'stringr' library to substitute '' for '*'
legends <- legends %>% mutate(Runs = str_replace(Runs, c("[*]"), ""))
# We need to recast the following columns as numerical
# 4,5,6,7,8,9,10, 12
legends <- legends %>% mutate_at(vars(4, 12), as.numeric)
legends_grouped <- legends %>%
group_by(Name) %>%
summarise(rpi=mean(Runs))
legends <- legends %>%
group_by(Name) %>%
mutate(cum_rpi = dplyr::cummean(Runs))
# Say I want to plot time series data for batsmen
# Then I want to convert the 'Date' column to a friendlier format
legends <- legends %>% mutate(Date = as.Date(Date, format="%d %b %Y"))
legends <- legends %>% mutate(Opposition = str_replace(Opposition, c("v "), ""))
# Rename the 13th column 'Opposition' as 'Team'. So that we can join them
colnames(legends) [13] <- "Team"
for (batsman_name in unique(legends$Name)){
batsman <- legends %>% filter(Name == batsman_name)
batsman_plot <- ggplot(batsman, aes(Date, cum_rpi)) + geom_line() +
xlab("Month - Year") + ylab("Cumulate Runs per Innings") +
xlim(as.Date(c("1989-01-01", "2014-12-30"))) +
ggtitle(batsman_name)
print(batsman_plot)
}
# Let's just say that for visual purposes I want to drop outlandish
# cumulative RPI values
# legends <- legends %>% filter(cum_rpi<=60 & cum_rpi>=25)
# for (batsman_name in unique(legends$Name)){
#  batsman <- legends %>% filter(Name == batsman_name)
#  batsman_plot <- ggplot(batsman, aes(Date, cum_rpi)) + geom_line(size=0.25) +
#   xlab("Time") + ylab("Cumulative Runs per Innings") +
#    xlim(as.Date(c("1989-01-01", "2014-12-30"))) +
#    ylim(25, 60) +
#    ggtitle(paste(batsman_name, "extremes removed"))
#  print(batsman_plot)
#}
write.csv(legends, file="data/legends_batting_formatted.csv")
# Cricket Grounds
library(tidyverse)
library(stringr)
library(zoo)
# Read the bowling data. It also has the ground name so we can
# start from there
grounds <- read_csv("data/bowling_performances_1985_formatted.csv")
# Now let's read the legends batting data
legends <- read_csv("data/legends_batting_formatted.csv")
# Writing a function to get the aggregate mean from vectors of runs and wickets
get_wickets_mean <- function (runs, wickets){
runs_sum = sum(runs)
wickets_sum = sum(wickets)
return (runs_sum/wickets_sum)
}
# Setting up an empty column for ground averages
grounds[, "ground_inns_mean"] <- NA
# Applying the function to that column
for (i in unique(grounds$Ground)){
print(i)
print(dim(grounds %>% filter(Ground==i)))
ground_df <- grounds %>% filter(Ground==i)
ground_df <- ground_df %>% arrange(Date, Inns)
df_length <- dim(ground_df)[1]
if (df_length < 11){
next
}
else{
for (i in 11: df_length){
start_index <- i - 10
end_index <- i - 1
inns_index <- ground_df[i,]$Index
computing_df <- ground_df[start_index:end_index, ]
wickets_mean <- get_wickets_mean(computing_df$Runs, computing_df$Wickets)
grounds[(grounds$Index==inns_index), "ground_inns_mean"] <- wickets_mean
}
}
}
# Joining legends with the grounds tibble
joined_df <- left_join(legends, grounds, by=c("Team","Date","Inns"))
# Now let's filter Ricky Ponting and see how he did against great bowling attacks
ponting <- joined_df %>% filter(Name=='Ricky Ponting')
View(ponting)
View(ponting)
ggplot(data=ponting, aes(x=ground_inns_mean, y=Runs)) + geom_point()
ggplot(data=ponting, aes(x=ground_inns_mean, y=Runs.x)) + geom_point()
ggplot(data=ponting, aes(y=ground_inns_mean, x=Runs.x)) + geom_point()
ggplot(data=ponting, aes(y=ground_inns_mean, x=ten_inns_mean)) + geom_point()
library(RColorBrewer)
# Making plots
ggplot(data = ponting, aes(x=ten_inns_mean, y=ground_inns_mean)) +
geom_point(aes(color=cut(Runs.x, c(0,25,50,100,Inf))), size=5) +
scale_color_manual(name="Runs.x",
values = c("(0,25]" = "black",
"(25,50]" = "purple",
"(50,100]" = "red",
"(100,Inf]" = "blue",))
# Making plots
ggplot(data = ponting, aes(x=ten_inns_mean, y=ground_inns_mean)) +
geom_point(aes(color=cut(Runs.x, c(0,25,50,100,Inf))), size=5) +
scale_color_manual(name="Runs.x",
values = c("(0,25]" = "black",
"(25,50]" = "purple",
"(50,100]" = "red",
"(100,Inf]" = "blue",))
# Making plots
ggplot(data = ponting, aes(x=ten_inns_mean, y=ground_inns_mean)) +
geom_point(aes(color=cut(Runs.x, c(0,25,50,100,Inf))), size=5) +
scale_color_manual(name="Runs.x",
values = c("(0,25]" = "black",
"(25,50]" = "purple",
"(50,100]" = "red",
"(100,Inf]" = "blue"))
# Making plots
ggplot(data = ponting, aes(x=ten_inns_mean, y=ground_inns_mean)) +
geom_point(aes(color=cut(Runs.x, c(0,25,50,100,Inf)))) +
scale_color_manual(name="Runs.x",
values = c("(0,25]" = "black",
"(25,50]" = "purple",
"(50,100]" = "red",
"(100,Inf]" = "blue"))
# Making plots
ggplot(data = ponting, aes(x=ten_inns_mean, y=ground_inns_mean)) +
geom_point(aes(color=cut(Runs.x, c(0,25,50,100,Inf)))) +
scale_color_manual(name="Runs.x",
values = c("(0,25]" = "black",
"(25,50]" = "purple",
"(50,100]" = "red",
"(100,Inf]" = "blue"),
labels = c("0-25", "25-50", "50-100", "100+"))
# Making plots
ggplot(data = ponting, aes(x=ten_inns_mean, y=ground_inns_mean)) +
geom_point(aes(color=cut(Runs.x, c(0,25,50,100,Inf)))) +
scale_color_manual(name="Runs.x",
values = c("(0,25]" = "black",
"(25,50]" = "purple",
"(50,100]" = "red",
"(100,Inf]" = "blue"),
labels = c("0-25", "25-50", "50-100", "100+")) +
xlab("Bowling attack average/form") + ylab("Pitch average/form")
# Making plots
ggplot(data = ponting, aes(x=ten_inns_mean, y=ground_inns_mean)) +
geom_point(aes(color=cut(Runs.x, c(0,25,50,100,Inf)))) +
scale_color_manual(name="Runs.x",
values = c("(0,25]" = "black",
"(25,50]" = "cyan",
"(50,100]" = "purple",
"(100,Inf]" = "blue"),
labels = c("0-25", "25-50", "50-100", "100+")) +
xlab("Bowling attack average/form") + ylab("Pitch average/form")
ggplot(ponting, aes(x=ten_inns_mean)) + geom_histogram()
# Now let's do the same for Sachin
sachin <- joined_df %>% filter(Name=='Sachin Tendulkar')
# Making plots
ggplot(data = sachin, aes(x=ten_inns_mean, y=ground_inns_mean)) +
geom_point(aes(color=cut(Runs.x, c(0,25,50,100,Inf)))) +
scale_color_manual(name="Runs.x",
values = c("(0,25]" = "black",
"(25,50]" = "cyan",
"(50,100]" = "purple",
"(100,Inf]" = "blue"),
labels = c("0-25", "25-50", "50-100", "100+")) +
xlab("Bowling attack average/form") + ylab("Pitch average/form")
ggplot(sachin, aes(x=ten_inns_mean)) + geom_histogram()
sachin_d <- density(sachin$ten_inns_mean)
plot(sachin_d)
sachin_d <- density(sachin$ten_inns_mean, na.rm=TRUE)
plot(sachin_d)
ponting_d <- density(ponting$ten_inns_mean, na.rm=TRUE)
plot(ponting_d)
# Now let's do the same for Lara
lara <- joined_df %>% filter(Name=='Brian Lara')
# Making plots
ggplot(data = lara, aes(x=ten_inns_mean, y=ground_inns_mean)) +
geom_point(aes(color=cut(Runs.x, c(0,25,50,100,Inf)))) +
scale_color_manual(name="Runs.x",
values = c("(0,25]" = "black",
"(25,50]" = "cyan",
"(50,100]" = "purple",
"(100,Inf]" = "blue"),
labels = c("0-25", "25-50", "50-100", "100+")) +
xlab("Bowling attack average/form") + ylab("Pitch average/form")
ggplot(lara, aes(x=ten_inns_mean)) + geom_histogram()
lara_d <- density(lara$ten_inns_mean, na.rm=TRUE)
plot(lara_d)
