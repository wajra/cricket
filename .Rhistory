# Read the data
legends <- read_csv("data/legends_batting.csv")
# Drop 'DNB' rows
legends <- legends %>% filter(!Runs %in% c('DNB', 'TDNB'))
# The problem is that 'Runs' column has a '*' at the end if
# he was not dismissed. We need to get rid of that
# So we'll use the 'stringr' library to substitute '' for '*'
legends <- legends %>% mutate(Runs = str_replace(Runs, c("[*]"), ""))
# We need to recast the following columns as numerical
# 4,5,6,7,8,9,10, 12
legends <- legends %>% mutate_at(vars(4), as.numeric)
legends_grouped <- legends %>%
group_by(Name) %>%
summarise(rpi=mean(Runs))
legends <- legends %>%
group_by(Name) %>%
mutate(cum_rpi = dplyr::cummean(Runs))
# Say I want to plot time series data for batsmen
# Then I want to convert the 'Date' column to a friendlier format
legends <- legends %>% mutate(Date = as.Date(Date, format="%d %b %Y"))
for (batsman_name in unique(legends$Name)){
batsman <- legends %>% filter(Name == batsman_name)
batsman_plot <- ggplot(batsman, aes(Date, cum_rpi)) + geom_line() +
xlab("Month - Year") + ylab("Cumulate Runs per Innings") +
xlim(as.Date(c("1989-01-01", "2014-12-30"))) +
ggtitle(batsman_name)
print(batsman_plot)
}
# Let's just say that for visual purposes I want to drop outlandish
# cumulative RPI values
legends <- legends %>% filter(cum_rpi<=60 & cum_rpi>=25)
for (batsman_name in unique(legends$Name)){
batsman <- legends %>% filter(Name == batsman_name)
batsman_plot <- ggplot(batsman, aes(Date, cum_rpi)) + geom_point() + # geom_line(size=0.25)
xlab("Time") + ylab("Cumulative Runs per Innings") +
xlim(as.Date(c("1989-01-01", "2014-12-30"))) +
ylim(25, 60) +
ggtitle(paste(batsman_name, "extremes removed"))
print(batsman_plot)
}
Let's just say that for visual purposes I want to drop outlandish
# cumulative RPI values
legends <- legends %>% filter(cum_rpi<=60 & cum_rpi>=25)
for (batsman_name in unique(legends$Name)){
batsman <- legends %>% filter(Name == batsman_name)
batsman_plot <- ggplot(batsman, aes(Date, cum_rpi)) + geom_bar() + # geom_line(size=0.25)
xlab("Time") + ylab("Cumulative Runs per Innings") +
xlim(as.Date(c("1989-01-01", "2014-12-30"))) +
ylim(25, 60) +
ggtitle(paste(batsman_name, "extremes removed"))
print(batsman_plot)
}
# Let's just say that for visual purposes I want to drop outlandish
# cumulative RPI values
legends <- legends %>% filter(cum_rpi<=60 & cum_rpi>=25)
for (batsman_name in unique(legends$Name)){
batsman <- legends %>% filter(Name == batsman_name)
batsman_plot <- ggplot(batsman, aes(Date, cum_rpi)) + geom_bar(stat="identity") + # geom_line(size=0.25)
xlab("Time") + ylab("Cumulative Runs per Innings") +
xlim(as.Date(c("1989-01-01", "2014-12-30"))) +
ylim(25, 60) +
ggtitle(paste(batsman_name, "extremes removed"))
print(batsman_plot)
}
# Let's just say that for visual purposes I want to drop outlandish
# cumulative RPI values
legends <- legends %>% filter(cum_rpi<=60 & cum_rpi>=25)
for (batsman_name in unique(legends$Name)){
batsman <- legends %>% filter(Name == batsman_name)
batsman_plot <- ggplot(batsman, aes(Date, cum_rpi)) + geom_line(size=0.25) +
xlab("Time") + ylab("Cumulative Runs per Innings") +
xlim(as.Date(c("1989-01-01", "2014-12-30"))) +
ylim(25, 60) +
ggtitle(paste(batsman_name, "extremes removed"))
print(batsman_plot)
}
library(tidyverse)
# Read the data
ricky_ponting <- read_csv("data/ricky_ponting_test_innings.csv")
# Let's say we want to know the number of innings he's actually batted in
ricky_ponting %>% filter(Runs != 'DNB')
# Now let's say we want his
# 1. Batting average
# 2. Runs per innings (A far more valuable statistic that BA imo)
# The problem is that 'Runs' column has a '*' at the end if
# he was not dismissed. We need to get rid of that
# So we'll use the 'stringr' library to substitute '' for '*'
ricky_ponting <- ricky_ponting %>% mutate(Runs = str_replace(Runs, c("[*]"), ""))
ricky_ponting %>% filter(Dismissal == 'not out')
# Ricking Ponting valid innings
ricky_ponting_vi <- ricky_ponting %>% filter(Runs != 'DNB')
# Batting Average
not_out_innings <- dim(ricky_ponting_vi %>% filter(Dismissal %in% c('not out','retired notout')))[1]
total_innings <- dim(ricky_ponting_vi)[1]
# Now we cast the Runs as a numeric table
ricky_ponting_vi <- ricky_ponting_vi %>%mutate_at(vars(2,7), as.numeric)
# ricky_ponting_vi <- ricky_ponting_vi %>%mutate_at(vars(SR), as.numeric)
ricky_ponting_vi %>% summarise(runs_sum = sum(Runs), rpi = mean(Runs),
avg = sum(Runs)/(total_innings - not_out_innings))
# Cumulative RPI
ricky_ponting_rpi_cum <- dplyr::cummean(ricky_ponting_vi$Runs)
ricky_ponting_vi <- add_column(ricky_ponting_vi, rpi_cum = ricky_ponting_rpi_cum)
ggplot(ricky_ponting_vi, aes(x=Runs, y=SR)) + geom_point(shape=1) + ylim(0,200)
ggplot(ricky_ponting_vi, aes(x=InnsIndex, y=rpi_cum)) + geom_bar(stat="identity")
ggplot(bowling_west_indies, aes(y=ten_inns_mean)) + geom_bar(stat="identity")
ggplot(bowling_west_indies, aes(x=X1, y=ten_inns_mean)) + geom_bar(stat="identity")
ggplot(bowling_west_indies, aes(x=Date, y=ten_inns_mean)) + geom_bar(stat="identity")
ggplot(bowling_west_indies, aes(x=Date, y=ten_inns_mean)) + geom_bar(stat="identity", color='black',
width=1)
ggplot(bowling_west_indies, aes(Date, ten_inns_mean)) + geom_point() +
xlab("Month - Year") + ylab("Bowling form coming into the innings")
ggplot(bowling_west_indies, aes(x=Date, y=ten_inns_mean)) + geom_bar(stat="identity", color='black',
width=1)
ggplot(bowling_west_indies, aes(x=Date, y=ten_inns_mean)) + geom_bar(stat="identity", color='black',
width=1, position = position_dodge(width = 0))
unique(bowling$Team)
for (i in unique(bowling$Team)){
print(i)
}
for (i in unique(bowling$Team)){
print(i)[1]
}
for (i in unique(bowling$Team)){
print(i)[1][1]
}
for (i in unique(bowling$Team)){
print(dim(bowling %>% filter(Team==i)))
}
for (i in unique(bowling$Team)){
print(i)
print(dim(bowling %>% filter(Team==i)))
}
bowling <- read_csv("data/bowling_performances_from_1985.csv")
bowling[20, "Index"]
bowling[20,]$Index
bowling$Index == 200
# Bowling attacks
library(tidyverse)
library(stringr)
library(zoo)
# Read the data
bowling <- read_csv("data/bowling_performances_from_1985.csv")
# Drop rows that have Runs as 'DNB' and forfeite'
bowling <- bowling %>% filter(!Score %in% c("DNB", "forfeite"))
# We have to replace the 'v ' in the Opposition column
bowling <- bowling %>% mutate(Opposition = str_replace(Opposition, c("v "), ""))
# We'll replace 'd' at the end of the Runs column for the declared innings
bowling <- bowling %>% mutate(Score = str_replace(Score, c("d"), ""))
# Format the data column
bowling <- bowling %>% mutate(Date = as.Date(Date, format="%d %b %Y"))
# Now we need to extract the wickets and runs from the Score column
# First the wickets
# Test out the regex
str_match("225/7", "/([0-9])")[1,2]
# Then the runs
# Test out the regex for that
str_detect("2/7", "^[0-9]{1,3}$")
# First we extract the wickets using the str_match we tested above
bowling <- bowling %>% mutate(Wickets = str_match(Score, "/([0-9])")[,2])
# Now we replace the NA in the Wickets column with 10
bowling <- bowling %>% mutate(Wickets = replace_na(Wickets, 10))
# Now we need to extract the Runs from the score
bowling <- bowling %>% mutate(Runs = str_match(Score, "^([0-9]{1,3})")[,2])
# Set wickets and Runs columns as numeric
bowling <- bowling %>%mutate_at(vars(12,13), as.numeric)
# Writing a function to get the aggregate mean from vectors of runs and wickets
get_wickets_mean <- function (runs, wickets){
runs_sum = sum(runs)
wickets_sum = sum(wickets)
return (runs_sum/wickets_sum)
}
# Define vectors for runs and wickets
wickets_c <- c(10, 0, 7, 6, 10, 10)
runs_c <- c(360, 25, 590, 250, 400, 300)
# Test out the function
get_wickets_mean(runs_c, wickets_c)
# Apply the rolling functions
# Now let's try to apply 'get_wickets_mean' function to West Indies
# Let's get the West Indies team
bowling_west_indies <- bowling %>% filter(Team == 'West Indies')
# Let's sort them by the Date and the Innings
bowling_west_indies <- bowling_west_indies %>% arrange(Date, Inns)
# rollapply(bowling_west_indies, width=10, get_wickets_mean_df, fill=NA)
bowling_west_indies[,"ten_inns_mean"] <- NA
wi_len <- dim(bowling_west_indies)[1]
for (i in 11:wi_len){
start_index <- i - 10
end_index <- i - 1
computing_df <- bowling_west_indies[start_index:end_index, ]
print(dim(computing_df)[1])
wickets_mean <- get_wickets_mean(computing_df$Runs, computing_df$Wickets)
bowling_west_indies[i, "ten_inns_mean"] <- wickets_mean
}
ggplot(bowling_west_indies, aes(Date, ten_inns_mean)) + geom_line() +
xlab("Month - Year") + ylab("Bowling form coming into the innings")
ggplot(bowling_west_indies, aes(Date, ten_inns_mean)) + geom_point() +
xlab("Month - Year") + ylab("Bowling form coming into the innings")
ggplot(bowling_west_indies, aes(x=Date, y=ten_inns_mean)) + geom_bar(stat="identity", color='black',
width=1, position = position_dodge(width = 0))
bowling[, "ten_inns_mean"] <- NA
rm(list=ls())
# Bowling attacks
library(tidyverse)
library(stringr)
library(zoo)
# Read the data
bowling <- read_csv("data/bowling_performances_from_1985.csv")
# Drop rows that have Runs as 'DNB' and forfeite'
bowling <- bowling %>% filter(!Score %in% c("DNB", "forfeite"))
# We have to replace the 'v ' in the Opposition column
bowling <- bowling %>% mutate(Opposition = str_replace(Opposition, c("v "), ""))
# We'll replace 'd' at the end of the Runs column for the declared innings
bowling <- bowling %>% mutate(Score = str_replace(Score, c("d"), ""))
# Format the data column
bowling <- bowling %>% mutate(Date = as.Date(Date, format="%d %b %Y"))
# Now we need to extract the wickets and runs from the Score column
# First the wickets
# Test out the regex
str_match("225/7", "/([0-9])")[1,2]
# Then the runs
# Test out the regex for that
str_detect("2/7", "^[0-9]{1,3}$")
# First we extract the wickets using the str_match we tested above
bowling <- bowling %>% mutate(Wickets = str_match(Score, "/([0-9])")[,2])
# Now we replace the NA in the Wickets column with 10
bowling <- bowling %>% mutate(Wickets = replace_na(Wickets, 10))
# Now we need to extract the Runs from the score
bowling <- bowling %>% mutate(Runs = str_match(Score, "^([0-9]{1,3})")[,2])
# Set wickets and Runs columns as numeric
bowling <- bowling %>%mutate_at(vars(12,13), as.numeric)
# Writing a function to get the aggregate mean from vectors of runs and wickets
get_wickets_mean <- function (runs, wickets){
runs_sum = sum(runs)
wickets_sum = sum(wickets)
return (runs_sum/wickets_sum)
}
# Define vectors for runs and wickets
wickets_c <- c(10, 0, 7, 6, 10, 10)
runs_c <- c(360, 25, 590, 250, 400, 300)
# Test out the function
get_wickets_mean(runs_c, wickets_c)
# Apply the rolling functions
# Now let's try to apply 'get_wickets_mean' function to West Indies
# Let's get the West Indies team
bowling_west_indies <- bowling %>% filter(Team == 'West Indies')
# Let's sort them by the Date and the Innings
bowling_west_indies <- bowling_west_indies %>% arrange(Date, Inns)
# rollapply(bowling_west_indies, width=10, get_wickets_mean_df, fill=NA)
bowling_west_indies[,"ten_inns_mean"] <- NA
wi_len <- dim(bowling_west_indies)[1]
for (i in 11:wi_len){
start_index <- i - 10
end_index <- i - 1
computing_df <- bowling_west_indies[start_index:end_index, ]
print(dim(computing_df)[1])
wickets_mean <- get_wickets_mean(computing_df$Runs, computing_df$Wickets)
bowling_west_indies[i, "ten_inns_mean"] <- wickets_mean
}
ggplot(bowling_west_indies, aes(Date, ten_inns_mean)) + geom_line() +
xlab("Month - Year") + ylab("Bowling form coming into the innings")
ggplot(bowling_west_indies, aes(Date, ten_inns_mean)) + geom_point() +
xlab("Month - Year") + ylab("Bowling form coming into the innings")
ggplot(bowling_west_indies, aes(x=Date, y=ten_inns_mean)) + geom_bar(stat="identity", color='black',
width=1, position = position_dodge(width = 0))
bowling[, "ten_inns_mean"] <- NA
View(bowling_west_indies)
for (i in unique(bowling$Team)){
print(i)
print(dim(bowling %>% filter(Team==i)))
team_df <- bowling %>% filter(Team==i)
team_df <- team_df %>% arrange(Date, Inns)
df_length <- dim(team_df)[1]
for (i in 11: df_length){
start_index <- i - 10
end_index <- i - 1
inns_index <- team_df[i,]$Index
wickets_mean <- get_wickets_mean(team_df$Runs, team_df$Wickets)
bowling[(bowling$Index==inns_index), "ten_inns_mean"] <- wickets_mean
}
}
View(bowling)
# Bowling attacks
library(tidyverse)
library(stringr)
library(zoo)
# Read the data
bowling <- read_csv("data/bowling_performances_from_1985.csv")
# Drop rows that have Runs as 'DNB' and forfeite'
bowling <- bowling %>% filter(!Score %in% c("DNB", "forfeite"))
# We have to replace the 'v ' in the Opposition column
bowling <- bowling %>% mutate(Opposition = str_replace(Opposition, c("v "), ""))
# We'll replace 'd' at the end of the Runs column for the declared innings
bowling <- bowling %>% mutate(Score = str_replace(Score, c("d"), ""))
# Format the data column
bowling <- bowling %>% mutate(Date = as.Date(Date, format="%d %b %Y"))
# Now we need to extract the wickets and runs from the Score column
# First the wickets
# Test out the regex
str_match("225/7", "/([0-9])")[1,2]
# Then the runs
# Test out the regex for that
str_detect("2/7", "^[0-9]{1,3}$")
# First we extract the wickets using the str_match we tested above
bowling <- bowling %>% mutate(Wickets = str_match(Score, "/([0-9])")[,2])
# Now we replace the NA in the Wickets column with 10
bowling <- bowling %>% mutate(Wickets = replace_na(Wickets, 10))
# Now we need to extract the Runs from the score
bowling <- bowling %>% mutate(Runs = str_match(Score, "^([0-9]{1,3})")[,2])
# Set wickets and Runs columns as numeric
bowling <- bowling %>%mutate_at(vars(12,13), as.numeric)
# Writing a function to get the aggregate mean from vectors of runs and wickets
get_wickets_mean <- function (runs, wickets){
runs_sum = sum(runs)
wickets_sum = sum(wickets)
return (runs_sum/wickets_sum)
}
# Define vectors for runs and wickets
wickets_c <- c(10, 0, 7, 6, 10, 10)
runs_c <- c(360, 25, 590, 250, 400, 300)
# Test out the function
get_wickets_mean(runs_c, wickets_c)
# Apply the rolling functions
# Now let's try to apply 'get_wickets_mean' function to West Indies
# Let's get the West Indies team
bowling_west_indies <- bowling %>% filter(Team == 'West Indies')
# Let's sort them by the Date and the Innings
bowling_west_indies <- bowling_west_indies %>% arrange(Date, Inns)
# rollapply(bowling_west_indies, width=10, get_wickets_mean_df, fill=NA)
bowling_west_indies[,"ten_inns_mean"] <- NA
wi_len <- dim(bowling_west_indies)[1]
for (i in 11:wi_len){
start_index <- i - 10
end_index <- i - 1
computing_df <- bowling_west_indies[start_index:end_index, ]
print(dim(computing_df)[1])
wickets_mean <- get_wickets_mean(computing_df$Runs, computing_df$Wickets)
bowling_west_indies[i, "ten_inns_mean"] <- wickets_mean
}
ggplot(bowling_west_indies, aes(Date, ten_inns_mean)) + geom_line() +
xlab("Month - Year") + ylab("Bowling form coming into the innings")
ggplot(bowling_west_indies, aes(Date, ten_inns_mean)) + geom_point() +
xlab("Month - Year") + ylab("Bowling form coming into the innings")
ggplot(bowling_west_indies, aes(x=Date, y=ten_inns_mean)) + geom_bar(stat="identity", color='black',
width=1, position = position_dodge(width = 0))
bowling[, "ten_inns_mean"] <- NA
for (i in unique(bowling$Team)){
print(i)
print(dim(bowling %>% filter(Team==i)))
team_df <- bowling %>% filter(Team==i)
team_df <- team_df %>% arrange(Date, Inns)
df_length <- dim(team_df)[1]
for (i in 11: df_length){
start_index <- i - 10
end_index <- i - 1
inns_index <- team_df[i,]$Index
wickets_mean <- get_wickets_mean(team_df$Runs, team_df$Wickets)
bowling[(bowling$Index==inns_index), "ten_inns_mean"] <- wickets_mean
}
}
bowling[bowling$Team=="ICC World XI", ]
for (i in unique(bowling$Team)){
print(i)
print(dim(bowling %>% filter(Team==i)))
team_df <- bowling %>% filter(Team==i)
team_df <- team_df %>% arrange(Date, Inns)
df_length <- dim(team_df)[1]
if (df_length < 11){
next
}
else{
for (i in 11: df_length){
start_index <- i - 10
end_index <- i - 1
inns_index <- team_df[i,]$Index
wickets_mean <- get_wickets_mean(team_df$Runs, team_df$Wickets)
bowling[(bowling$Index==inns_index), "ten_inns_mean"] <- wickets_mean
}
}
}
west_indies_df <- bowling %>% filter(Team=='West Indies')
View(west_indies_df)
View(bowling)
for (i in unique(bowling$Team)){
print(i)
print(dim(bowling %>% filter(Team==i)))
team_df <- bowling %>% filter(Team==i)
team_df <- team_df %>% arrange(Date, Inns)
df_length <- dim(team_df)[1]
if (df_length < 11){
next
}
else{
for (i in 11: df_length){
start_index <- i - 10
end_index <- i - 1
inns_index <- team_df[i,]$Index
computing_df <- team_df[start_index:end_index, ]
wickets_mean <- get_wickets_mean(computing_df$Runs, computing_df$Wickets)
bowling[(bowling$Index==inns_index), "ten_inns_mean"] <- wickets_mean
}
}
}
west_indies_df <- bowling %>% filter(Team=='West Indies')
west_indies_df <- bowling %>% filter(Team=='West Indies')
View(bowling_west_indies)
View(west_indies_df)
library(tidyverse)
# Read the data
ricky_ponting <- read_csv("data/ricky_ponting_test_innings.csv")
# Let's say we want to know the number of innings he's actually batted in
ricky_ponting %>% filter(Runs != 'DNB')
# Now let's say we want his
# 1. Batting average
# 2. Runs per innings (A far more valuable statistic that BA imo)
# The problem is that 'Runs' column has a '*' at the end if
# he was not dismissed. We need to get rid of that
# So we'll use the 'stringr' library to substitute '' for '*'
ricky_ponting <- ricky_ponting %>% mutate(Runs = str_replace(Runs, c("[*]"), ""))
ricky_ponting %>% filter(Dismissal == 'not out')
# Ricking Ponting valid innings
ricky_ponting_vi <- ricky_ponting %>% filter(Runs != 'DNB')
# Batting Average
not_out_innings <- dim(ricky_ponting_vi %>% filter(Dismissal %in% c('not out','retired notout')))[1]
total_innings <- dim(ricky_ponting_vi)[1]
# Now we cast the Runs as a numeric table
ricky_ponting_vi <- ricky_ponting_vi %>%mutate_at(vars(2,7), as.numeric)
# ricky_ponting_vi <- ricky_ponting_vi %>%mutate_at(vars(SR), as.numeric)
ricky_ponting_vi %>% summarise(runs_sum = sum(Runs), rpi = mean(Runs),
avg = sum(Runs)/(total_innings - not_out_innings))
# Cumulative RPI
ricky_ponting_rpi_cum <- dplyr::cummean(ricky_ponting_vi$Runs)
ricky_ponting_vi <- add_column(ricky_ponting_vi, rpi_cum = ricky_ponting_rpi_cum)
ggplot(ricky_ponting_vi, aes(x=Runs, y=SR)) + geom_point(shape=1) + ylim(0,200)
ggplot(ricky_ponting_vi, aes(x=InnsIndex, y=rpi_cum)) + geom_bar(stat="identity")
View(bowling)
left_join(ricky_ponting_vi, bowling, by = (Date, Inns))
left_join(ricky_ponting_vi, bowling, by = c("Date", "Inns"))
ricky_ponting_vi <- ricky_ponting_vi %>% mutate(Date = as.Date(Date, format="%d %b %Y"))
left_join(ricky_ponting_vi, bowling, by = c("Date", "Inns"))
joined_df <- left_join(ricky_ponting_vi, bowling, by = c("Date", "Inns"))
View(joined_df)
View(ricky_ponting_vi)
View(computing_df)
View(bowling)
View(ricky_ponting_vi)
joined_df <- inner_join(ricky_ponting_vi, bowling, by = c("Date", "Inns"))
View(joined_df)
ricky_ponting_vi <- ricky_ponting_vi %>% mutate(Opposition = str_replace(Opposition, c("v "), ""))
joined_df <- inner_join(ricky_ponting_vi, bowling, by = c("Date", "Inns", "Opposition"))
View(joined_df)
colnames(ricky_ponting_vi)
colnames(ricky_ponting_vi) [11] <- "Team"
joined_df <- inner_join(ricky_ponting_vi, bowling, by = c("Date", "Inns", "Team"))
View(joined_df)
colnames(joined_df)
ggplot(joined_df, aes(x=Runs.x, y=ten_inns_mean)) + gg_point()
ggplot(joined_df, aes(x=Runs.x, y=ten_inns_mean)) + geom_point()
library(tidyverse)
# Read the data
legends <- read_csv("data/legends_batting.csv")
# Drop 'DNB' rows
legends <- legends %>% filter(!Runs %in% c('DNB', 'TDNB'))
# The problem is that 'Runs' column has a '*' at the end if
# he was not dismissed. We need to get rid of that
# So we'll use the 'stringr' library to substitute '' for '*'
legends <- legends %>% mutate(Runs = str_replace(Runs, c("[*]"), ""))
# We need to recast the following columns as numerical
# 4,5,6,7,8,9,10, 12
legends <- legends %>% mutate_at(vars(4), as.numeric)
legends_grouped <- legends %>%
group_by(Name) %>%
summarise(rpi=mean(Runs))
legends <- legends %>%
group_by(Name) %>%
mutate(cum_rpi = dplyr::cummean(Runs))
# Say I want to plot time series data for batsmen
# Then I want to convert the 'Date' column to a friendlier format
legends <- legends %>% mutate(Date = as.Date(Date, format="%d %b %Y"))
legends <- legends %>% mutate(Opposition = str_replace(Opposition, c("v "), ""))
colnames(legends) [13] <- "Team"
colnames(ricky_ponting_vi) [11] <- "Team"
sachin <- legends %>% filter(Name == "Sachin Tendulkar")
sachin_joined <- inner_join(sachin, bowling, by=c("Date", "Inns", "Team"))
View(sachin)
unique(sachin$Inns)
library(tidyverse)
# Read the data
legends <- read_csv("data/legends_batting.csv")
# Drop 'DNB' rows
legends <- legends %>% filter(!Runs %in% c('DNB', 'TDNB'))
# The problem is that 'Runs' column has a '*' at the end if
# he was not dismissed. We need to get rid of that
# So we'll use the 'stringr' library to substitute '' for '*'
legends <- legends %>% mutate(Runs = str_replace(Runs, c("[*]"), ""))
# We need to recast the following columns as numerical
# 4,5,6,7,8,9,10, 12
legends <- legends %>% mutate_at(vars(4, 12), as.numeric)
legends_grouped <- legends %>%
group_by(Name) %>%
summarise(rpi=mean(Runs))
legends <- legends %>%
group_by(Name) %>%
mutate(cum_rpi = dplyr::cummean(Runs))
# Say I want to plot time series data for batsmen
# Then I want to convert the 'Date' column to a friendlier format
legends <- legends %>% mutate(Date = as.Date(Date, format="%d %b %Y"))
legends <- legends %>% mutate(Opposition = str_replace(Opposition, c("v "), ""))
colnames(legends) [13] <- "Team"
sachin <- legends %>% filter(Name == "Sachin Tendulkar")
sachin_joined <- inner_join(sachin, bowling, by=c("Date", "Inns", "Team"))
View(sachin_joined)
ggplot(sachin_joined, aes(x=Runs.x, y=ten_inns_mean)) + geom_point()
